// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TESTFB_FB_CLUSTER_ROOM_H_
#define FLATBUFFERS_GENERATED_TESTFB_FB_CLUSTER_ROOM_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct vec3;

struct req_move;
struct req_moveBuilder;
struct req_moveT;

struct res_move;
struct res_moveBuilder;
struct res_moveT;

namespace cluster {
namespace room {

struct req_create;
struct req_createBuilder;
struct req_createT;

}  // namespace room
}  // namespace cluster

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(vec3, 12);

struct req_moveT : public ::flatbuffers::NativeTable {
  typedef req_move TableType;
  std::unique_ptr<fb::vec3> pos{};
  std::string name{};
  req_moveT() = default;
  req_moveT(const req_moveT &o);
  req_moveT(req_moveT&&) FLATBUFFERS_NOEXCEPT = default;
  req_moveT &operator=(req_moveT o) FLATBUFFERS_NOEXCEPT;
};

struct req_move FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef req_moveT NativeTableType;
  typedef req_moveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_NAME = 6
  };
  const fb::vec3 *pos() const {
    return GetStruct<const fb::vec3 *>(VT_POS);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<fb::vec3>(verifier, VT_POS, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
  req_moveT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(req_moveT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<req_move> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const req_moveT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct req_moveBuilder {
  typedef req_move Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const fb::vec3 *pos) {
    fbb_.AddStruct(req_move::VT_POS, pos);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(req_move::VT_NAME, name);
  }
  explicit req_moveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<req_move> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<req_move>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<req_move> Createreq_move(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const fb::vec3 *pos = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  req_moveBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<req_move> Createreq_moveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const fb::vec3 *pos = nullptr,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return fb::Createreq_move(
      _fbb,
      pos,
      name__);
}

::flatbuffers::Offset<req_move> Createreq_move(::flatbuffers::FlatBufferBuilder &_fbb, const req_moveT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct res_moveT : public ::flatbuffers::NativeTable {
  typedef res_move TableType;
  std::unique_ptr<fb::vec3> pos{};
  res_moveT() = default;
  res_moveT(const res_moveT &o);
  res_moveT(res_moveT&&) FLATBUFFERS_NOEXCEPT = default;
  res_moveT &operator=(res_moveT o) FLATBUFFERS_NOEXCEPT;
};

struct res_move FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef res_moveT NativeTableType;
  typedef res_moveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4
  };
  const fb::vec3 *pos() const {
    return GetStruct<const fb::vec3 *>(VT_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<fb::vec3>(verifier, VT_POS, 4) &&
           verifier.EndTable();
  }
  res_moveT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(res_moveT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<res_move> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const res_moveT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct res_moveBuilder {
  typedef res_move Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const fb::vec3 *pos) {
    fbb_.AddStruct(res_move::VT_POS, pos);
  }
  explicit res_moveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<res_move> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<res_move>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<res_move> Createres_move(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const fb::vec3 *pos = nullptr) {
  res_moveBuilder builder_(_fbb);
  builder_.add_pos(pos);
  return builder_.Finish();
}

::flatbuffers::Offset<res_move> Createres_move(::flatbuffers::FlatBufferBuilder &_fbb, const res_moveT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

namespace cluster {
namespace room {

struct req_createT : public ::flatbuffers::NativeTable {
  typedef req_create TableType;
  std::string name{};
};

struct req_create FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef req_createT NativeTableType;
  typedef req_createBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
  req_createT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(req_createT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<req_create> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const req_createT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct req_createBuilder {
  typedef req_create Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(req_create::VT_NAME, name);
  }
  explicit req_createBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<req_create> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<req_create>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<req_create> Createreq_create(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  req_createBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<req_create> Createreq_createDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return fb::cluster::room::Createreq_create(
      _fbb,
      name__);
}

::flatbuffers::Offset<req_create> Createreq_create(::flatbuffers::FlatBufferBuilder &_fbb, const req_createT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

}  // namespace room
}  // namespace cluster

inline req_moveT::req_moveT(const req_moveT &o)
      : pos((o.pos) ? new fb::vec3(*o.pos) : nullptr),
        name(o.name) {
}

inline req_moveT &req_moveT::operator=(req_moveT o) FLATBUFFERS_NOEXCEPT {
  std::swap(pos, o.pos);
  std::swap(name, o.name);
  return *this;
}

inline req_moveT *req_move::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<req_moveT>(new req_moveT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void req_move::UnPackTo(req_moveT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = pos(); if (_e) _o->pos = std::unique_ptr<fb::vec3>(new fb::vec3(*_e)); }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
}

inline ::flatbuffers::Offset<req_move> req_move::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const req_moveT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createreq_move(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<req_move> Createreq_move(::flatbuffers::FlatBufferBuilder &_fbb, const req_moveT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const req_moveT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _pos = _o->pos ? _o->pos.get() : nullptr;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  return fb::Createreq_move(
      _fbb,
      _pos,
      _name);
}

inline res_moveT::res_moveT(const res_moveT &o)
      : pos((o.pos) ? new fb::vec3(*o.pos) : nullptr) {
}

inline res_moveT &res_moveT::operator=(res_moveT o) FLATBUFFERS_NOEXCEPT {
  std::swap(pos, o.pos);
  return *this;
}

inline res_moveT *res_move::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<res_moveT>(new res_moveT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void res_move::UnPackTo(res_moveT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = pos(); if (_e) _o->pos = std::unique_ptr<fb::vec3>(new fb::vec3(*_e)); }
}

inline ::flatbuffers::Offset<res_move> res_move::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const res_moveT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createres_move(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<res_move> Createres_move(::flatbuffers::FlatBufferBuilder &_fbb, const res_moveT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const res_moveT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _pos = _o->pos ? _o->pos.get() : nullptr;
  return fb::Createres_move(
      _fbb,
      _pos);
}

namespace cluster {
namespace room {

inline req_createT *req_create::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<req_createT>(new req_createT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void req_create::UnPackTo(req_createT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
}

inline ::flatbuffers::Offset<req_create> req_create::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const req_createT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createreq_create(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<req_create> Createreq_create(::flatbuffers::FlatBufferBuilder &_fbb, const req_createT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const req_createT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  return fb::cluster::room::Createreq_create(
      _fbb,
      _name);
}

}  // namespace room
}  // namespace cluster
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_TESTFB_FB_CLUSTER_ROOM_H_
