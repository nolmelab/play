// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LEARNFB_APP_SAMPLE_H_
#define FLATBUFFERS_GENERATED_LEARNFB_APP_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace app {
namespace sample {

struct vec3;

struct monster;
struct monsterBuilder;
struct monsterT;

struct weapon;
struct weaponBuilder;
struct weaponT;

enum class color : int8_t {
  red = 0,
  green = 1,
  blue = 2,
  MIN = red,
  MAX = blue
};

inline const color (&EnumValuescolor())[3] {
  static const color values[] = {
    color::red,
    color::green,
    color::blue
  };
  return values;
}

inline const char * const *EnumNamescolor() {
  static const char * const names[4] = {
    "red",
    "green",
    "blue",
    nullptr
  };
  return names;
}

inline const char *EnumNamecolor(color e) {
  if (::flatbuffers::IsOutRange(e, color::red, color::blue)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamescolor()[index];
}

enum class equipment : uint8_t {
  NONE = 0,
  weapon = 1,
  MIN = NONE,
  MAX = weapon
};

inline const equipment (&EnumValuesequipment())[2] {
  static const equipment values[] = {
    equipment::NONE,
    equipment::weapon
  };
  return values;
}

inline const char * const *EnumNamesequipment() {
  static const char * const names[3] = {
    "NONE",
    "weapon",
    nullptr
  };
  return names;
}

inline const char *EnumNameequipment(equipment e) {
  if (::flatbuffers::IsOutRange(e, equipment::NONE, equipment::weapon)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesequipment()[index];
}

template<typename T> struct equipmentTraits {
  static const equipment enum_value = equipment::NONE;
};

template<> struct equipmentTraits<app::sample::weapon> {
  static const equipment enum_value = equipment::weapon;
};

template<typename T> struct equipmentUnionTraits {
  static const equipment enum_value = equipment::NONE;
};

template<> struct equipmentUnionTraits<app::sample::weaponT> {
  static const equipment enum_value = equipment::weapon;
};

struct equipmentUnion {
  equipment type;
  void *value;

  equipmentUnion() : type(equipment::NONE), value(nullptr) {}
  equipmentUnion(equipmentUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(equipment::NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  equipmentUnion(const equipmentUnion &);
  equipmentUnion &operator=(const equipmentUnion &u)
    { equipmentUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  equipmentUnion &operator=(equipmentUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~equipmentUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = equipmentUnionTraits<RT>::enum_value;
    if (type != equipment::NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, equipment type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  app::sample::weaponT *Asweapon() {
    return type == equipment::weapon ?
      reinterpret_cast<app::sample::weaponT *>(value) : nullptr;
  }
  const app::sample::weaponT *Asweapon() const {
    return type == equipment::weapon ?
      reinterpret_cast<const app::sample::weaponT *>(value) : nullptr;
  }
};

bool Verifyequipment(::flatbuffers::Verifier &verifier, const void *obj, equipment type);
bool VerifyequipmentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<equipment> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(vec3, 12);

struct monsterT : public ::flatbuffers::NativeTable {
  typedef monster TableType;
  std::unique_ptr<app::sample::vec3> pos{};
  int16_t mana = 150;
  int16_t hp = 100;
  std::string name{};
  std::vector<uint8_t> inventory{};
  app::sample::color color = app::sample::color::blue;
  std::vector<std::unique_ptr<app::sample::weaponT>> weapons{};
  app::sample::equipmentUnion equipped{};
  std::vector<app::sample::vec3> path{};
  monsterT() = default;
  monsterT(const monsterT &o);
  monsterT(monsterT&&) FLATBUFFERS_NOEXCEPT = default;
  monsterT &operator=(monsterT o) FLATBUFFERS_NOEXCEPT;
};

struct monster FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef monsterT NativeTableType;
  typedef monsterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_MANA = 6,
    VT_HP = 8,
    VT_NAME = 10,
    VT_INVENTORY = 14,
    VT_COLOR = 16,
    VT_WEAPONS = 18,
    VT_EQUIPPED_TYPE = 20,
    VT_EQUIPPED = 22,
    VT_PATH = 24
  };
  const app::sample::vec3 *pos() const {
    return GetStruct<const app::sample::vec3 *>(VT_POS);
  }
  int16_t mana() const {
    return GetField<int16_t>(VT_MANA, 150);
  }
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 100);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<uint8_t> *inventory() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_INVENTORY);
  }
  app::sample::color color() const {
    return static_cast<app::sample::color>(GetField<int8_t>(VT_COLOR, 2));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<app::sample::weapon>> *weapons() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<app::sample::weapon>> *>(VT_WEAPONS);
  }
  app::sample::equipment equipped_type() const {
    return static_cast<app::sample::equipment>(GetField<uint8_t>(VT_EQUIPPED_TYPE, 0));
  }
  const void *equipped() const {
    return GetPointer<const void *>(VT_EQUIPPED);
  }
  template<typename T> const T *equipped_as() const;
  const app::sample::weapon *equipped_as_weapon() const {
    return equipped_type() == app::sample::equipment::weapon ? static_cast<const app::sample::weapon *>(equipped()) : nullptr;
  }
  const ::flatbuffers::Vector<const app::sample::vec3 *> *path() const {
    return GetPointer<const ::flatbuffers::Vector<const app::sample::vec3 *> *>(VT_PATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<app::sample::vec3>(verifier, VT_POS, 4) &&
           VerifyField<int16_t>(verifier, VT_MANA, 2) &&
           VerifyField<int16_t>(verifier, VT_HP, 2) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.VerifyVector(inventory()) &&
           VerifyField<int8_t>(verifier, VT_COLOR, 1) &&
           VerifyOffset(verifier, VT_WEAPONS) &&
           verifier.VerifyVector(weapons()) &&
           verifier.VerifyVectorOfTables(weapons()) &&
           VerifyField<uint8_t>(verifier, VT_EQUIPPED_TYPE, 1) &&
           VerifyOffset(verifier, VT_EQUIPPED) &&
           Verifyequipment(verifier, equipped(), equipped_type()) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyVector(path()) &&
           verifier.EndTable();
  }
  monsterT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(monsterT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<monster> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const monsterT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const app::sample::weapon *monster::equipped_as<app::sample::weapon>() const {
  return equipped_as_weapon();
}

struct monsterBuilder {
  typedef monster Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const app::sample::vec3 *pos) {
    fbb_.AddStruct(monster::VT_POS, pos);
  }
  void add_mana(int16_t mana) {
    fbb_.AddElement<int16_t>(monster::VT_MANA, mana, 150);
  }
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(monster::VT_HP, hp, 100);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(monster::VT_NAME, name);
  }
  void add_inventory(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> inventory) {
    fbb_.AddOffset(monster::VT_INVENTORY, inventory);
  }
  void add_color(app::sample::color color) {
    fbb_.AddElement<int8_t>(monster::VT_COLOR, static_cast<int8_t>(color), 2);
  }
  void add_weapons(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<app::sample::weapon>>> weapons) {
    fbb_.AddOffset(monster::VT_WEAPONS, weapons);
  }
  void add_equipped_type(app::sample::equipment equipped_type) {
    fbb_.AddElement<uint8_t>(monster::VT_EQUIPPED_TYPE, static_cast<uint8_t>(equipped_type), 0);
  }
  void add_equipped(::flatbuffers::Offset<void> equipped) {
    fbb_.AddOffset(monster::VT_EQUIPPED, equipped);
  }
  void add_path(::flatbuffers::Offset<::flatbuffers::Vector<const app::sample::vec3 *>> path) {
    fbb_.AddOffset(monster::VT_PATH, path);
  }
  explicit monsterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<monster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<monster>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<monster> Createmonster(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const app::sample::vec3 *pos = nullptr,
    int16_t mana = 150,
    int16_t hp = 100,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> inventory = 0,
    app::sample::color color = app::sample::color::blue,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<app::sample::weapon>>> weapons = 0,
    app::sample::equipment equipped_type = app::sample::equipment::NONE,
    ::flatbuffers::Offset<void> equipped = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const app::sample::vec3 *>> path = 0) {
  monsterBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_equipped(equipped);
  builder_.add_weapons(weapons);
  builder_.add_inventory(inventory);
  builder_.add_name(name);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  builder_.add_equipped_type(equipped_type);
  builder_.add_color(color);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<monster> CreatemonsterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const app::sample::vec3 *pos = nullptr,
    int16_t mana = 150,
    int16_t hp = 100,
    const char *name = nullptr,
    const std::vector<uint8_t> *inventory = nullptr,
    app::sample::color color = app::sample::color::blue,
    const std::vector<::flatbuffers::Offset<app::sample::weapon>> *weapons = nullptr,
    app::sample::equipment equipped_type = app::sample::equipment::NONE,
    ::flatbuffers::Offset<void> equipped = 0,
    const std::vector<app::sample::vec3> *path = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto inventory__ = inventory ? _fbb.CreateVector<uint8_t>(*inventory) : 0;
  auto weapons__ = weapons ? _fbb.CreateVector<::flatbuffers::Offset<app::sample::weapon>>(*weapons) : 0;
  auto path__ = path ? _fbb.CreateVectorOfStructs<app::sample::vec3>(*path) : 0;
  return app::sample::Createmonster(
      _fbb,
      pos,
      mana,
      hp,
      name__,
      inventory__,
      color,
      weapons__,
      equipped_type,
      equipped,
      path__);
}

::flatbuffers::Offset<monster> Createmonster(::flatbuffers::FlatBufferBuilder &_fbb, const monsterT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct weaponT : public ::flatbuffers::NativeTable {
  typedef weapon TableType;
  std::string name{};
  int16_t damage = 0;
};

struct weapon FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef weaponT NativeTableType;
  typedef weaponBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DAMAGE = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int16_t damage() const {
    return GetField<int16_t>(VT_DAMAGE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_DAMAGE, 2) &&
           verifier.EndTable();
  }
  weaponT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(weaponT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<weapon> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const weaponT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct weaponBuilder {
  typedef weapon Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(weapon::VT_NAME, name);
  }
  void add_damage(int16_t damage) {
    fbb_.AddElement<int16_t>(weapon::VT_DAMAGE, damage, 0);
  }
  explicit weaponBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<weapon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<weapon>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<weapon> Createweapon(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int16_t damage = 0) {
  weaponBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_damage(damage);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<weapon> CreateweaponDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int16_t damage = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return app::sample::Createweapon(
      _fbb,
      name__,
      damage);
}

::flatbuffers::Offset<weapon> Createweapon(::flatbuffers::FlatBufferBuilder &_fbb, const weaponT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline monsterT::monsterT(const monsterT &o)
      : pos((o.pos) ? new app::sample::vec3(*o.pos) : nullptr),
        mana(o.mana),
        hp(o.hp),
        name(o.name),
        inventory(o.inventory),
        color(o.color),
        equipped(o.equipped),
        path(o.path) {
  weapons.reserve(o.weapons.size());
  for (const auto &weapons_ : o.weapons) { weapons.emplace_back((weapons_) ? new app::sample::weaponT(*weapons_) : nullptr); }
}

inline monsterT &monsterT::operator=(monsterT o) FLATBUFFERS_NOEXCEPT {
  std::swap(pos, o.pos);
  std::swap(mana, o.mana);
  std::swap(hp, o.hp);
  std::swap(name, o.name);
  std::swap(inventory, o.inventory);
  std::swap(color, o.color);
  std::swap(weapons, o.weapons);
  std::swap(equipped, o.equipped);
  std::swap(path, o.path);
  return *this;
}

inline monsterT *monster::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<monsterT>(new monsterT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void monster::UnPackTo(monsterT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = pos(); if (_e) _o->pos = std::unique_ptr<app::sample::vec3>(new app::sample::vec3(*_e)); }
  { auto _e = mana(); _o->mana = _e; }
  { auto _e = hp(); _o->hp = _e; }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = inventory(); if (_e) { _o->inventory.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->inventory.begin()); } }
  { auto _e = color(); _o->color = _e; }
  { auto _e = weapons(); if (_e) { _o->weapons.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->weapons[_i]) { _e->Get(_i)->UnPackTo(_o->weapons[_i].get(), _resolver); } else { _o->weapons[_i] = std::unique_ptr<app::sample::weaponT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->weapons.resize(0); } }
  { auto _e = equipped_type(); _o->equipped.type = _e; }
  { auto _e = equipped(); if (_e) _o->equipped.value = app::sample::equipmentUnion::UnPack(_e, equipped_type(), _resolver); }
  { auto _e = path(); if (_e) { _o->path.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->path[_i] = *_e->Get(_i); } } else { _o->path.resize(0); } }
}

inline ::flatbuffers::Offset<monster> monster::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const monsterT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createmonster(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<monster> Createmonster(::flatbuffers::FlatBufferBuilder &_fbb, const monsterT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const monsterT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _pos = _o->pos ? _o->pos.get() : nullptr;
  auto _mana = _o->mana;
  auto _hp = _o->hp;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _inventory = _o->inventory.size() ? _fbb.CreateVector(_o->inventory) : 0;
  auto _color = _o->color;
  auto _weapons = _o->weapons.size() ? _fbb.CreateVector<::flatbuffers::Offset<app::sample::weapon>> (_o->weapons.size(), [](size_t i, _VectorArgs *__va) { return Createweapon(*__va->__fbb, __va->__o->weapons[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _equipped_type = _o->equipped.type;
  auto _equipped = _o->equipped.Pack(_fbb);
  auto _path = _o->path.size() ? _fbb.CreateVectorOfStructs(_o->path) : 0;
  return app::sample::Createmonster(
      _fbb,
      _pos,
      _mana,
      _hp,
      _name,
      _inventory,
      _color,
      _weapons,
      _equipped_type,
      _equipped,
      _path);
}

inline weaponT *weapon::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<weaponT>(new weaponT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void weapon::UnPackTo(weaponT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = damage(); _o->damage = _e; }
}

inline ::flatbuffers::Offset<weapon> weapon::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const weaponT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createweapon(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<weapon> Createweapon(::flatbuffers::FlatBufferBuilder &_fbb, const weaponT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const weaponT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _damage = _o->damage;
  return app::sample::Createweapon(
      _fbb,
      _name,
      _damage);
}

inline bool Verifyequipment(::flatbuffers::Verifier &verifier, const void *obj, equipment type) {
  switch (type) {
    case equipment::NONE: {
      return true;
    }
    case equipment::weapon: {
      auto ptr = reinterpret_cast<const app::sample::weapon *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyequipmentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<equipment> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!Verifyequipment(
        verifier,  values->Get(i), types->GetEnum<equipment>(i))) {
      return false;
    }
  }
  return true;
}

inline void *equipmentUnion::UnPack(const void *obj, equipment type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case equipment::weapon: {
      auto ptr = reinterpret_cast<const app::sample::weapon *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> equipmentUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case equipment::weapon: {
      auto ptr = reinterpret_cast<const app::sample::weaponT *>(value);
      return Createweapon(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline equipmentUnion::equipmentUnion(const equipmentUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case equipment::weapon: {
      value = new app::sample::weaponT(*reinterpret_cast<app::sample::weaponT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void equipmentUnion::Reset() {
  switch (type) {
    case equipment::weapon: {
      auto ptr = reinterpret_cast<app::sample::weaponT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = equipment::NONE;
}

inline const app::sample::monster *Getmonster(const void *buf) {
  return ::flatbuffers::GetRoot<app::sample::monster>(buf);
}

inline const app::sample::monster *GetSizePrefixedmonster(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<app::sample::monster>(buf);
}

inline bool VerifymonsterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<app::sample::monster>(nullptr);
}

inline bool VerifySizePrefixedmonsterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<app::sample::monster>(nullptr);
}

inline void FinishmonsterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<app::sample::monster> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedmonsterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<app::sample::monster> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<app::sample::monsterT> UnPackmonster(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<app::sample::monsterT>(Getmonster(buf)->UnPack(res));
}

inline std::unique_ptr<app::sample::monsterT> UnPackSizePrefixedmonster(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<app::sample::monsterT>(GetSizePrefixedmonster(buf)->UnPack(res));
}

}  // namespace sample
}  // namespace app

#endif  // FLATBUFFERS_GENERATED_LEARNFB_APP_SAMPLE_H_
