// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUTH_ALPHA_AUTH_H_
#define FLATBUFFERS_GENERATED_AUTH_ALPHA_AUTH_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace alpha {
namespace auth {

struct req_login;
struct req_loginBuilder;
struct req_loginT;

struct req_logout;
struct req_logoutBuilder;
struct req_logoutT;

struct req_loginT : public ::flatbuffers::NativeTable {
  typedef req_login TableType;
  std::string user_id{};
  std::string password{};
};

struct req_login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef req_loginT NativeTableType;
  typedef req_loginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
  req_loginT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(req_loginT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<req_login> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const req_loginT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct req_loginBuilder {
  typedef req_login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(req_login::VT_USER_ID, user_id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(req_login::VT_PASSWORD, password);
  }
  explicit req_loginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<req_login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<req_login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<req_login> Createreq_login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  req_loginBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<req_login> Createreq_loginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    const char *password = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return alpha::auth::Createreq_login(
      _fbb,
      user_id__,
      password__);
}

::flatbuffers::Offset<req_login> Createreq_login(::flatbuffers::FlatBufferBuilder &_fbb, const req_loginT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct req_logoutT : public ::flatbuffers::NativeTable {
  typedef req_logout TableType;
};

struct req_logout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef req_logoutT NativeTableType;
  typedef req_logoutBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  req_logoutT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(req_logoutT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<req_logout> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const req_logoutT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct req_logoutBuilder {
  typedef req_logout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit req_logoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<req_logout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<req_logout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<req_logout> Createreq_logout(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  req_logoutBuilder builder_(_fbb);
  return builder_.Finish();
}

::flatbuffers::Offset<req_logout> Createreq_logout(::flatbuffers::FlatBufferBuilder &_fbb, const req_logoutT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline req_loginT *req_login::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<req_loginT>(new req_loginT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void req_login::UnPackTo(req_loginT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = user_id(); if (_e) _o->user_id = _e->str(); }
  { auto _e = password(); if (_e) _o->password = _e->str(); }
}

inline ::flatbuffers::Offset<req_login> req_login::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const req_loginT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createreq_login(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<req_login> Createreq_login(::flatbuffers::FlatBufferBuilder &_fbb, const req_loginT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const req_loginT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _user_id = _o->user_id.empty() ? 0 : _fbb.CreateString(_o->user_id);
  auto _password = _o->password.empty() ? 0 : _fbb.CreateString(_o->password);
  return alpha::auth::Createreq_login(
      _fbb,
      _user_id,
      _password);
}

inline req_logoutT *req_logout::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<req_logoutT>(new req_logoutT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void req_logout::UnPackTo(req_logoutT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline ::flatbuffers::Offset<req_logout> req_logout::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const req_logoutT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createreq_logout(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<req_logout> Createreq_logout(::flatbuffers::FlatBufferBuilder &_fbb, const req_logoutT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const req_logoutT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return alpha::auth::Createreq_logout(
      _fbb);
}

}  // namespace auth
}  // namespace alpha

#endif  // FLATBUFFERS_GENERATED_AUTH_ALPHA_AUTH_H_
