// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ERRORCODE_ALPHA_H_
#define FLATBUFFERS_GENERATED_ERRORCODE_ALPHA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace alpha {

enum class error_code : uint16_t {
  success = 0,
  fail_backend_not_responding = 1,
  fail_user_not_authenticated = 2,
  fail_kickout_by_duplicate_login = 3,
  fail_room_not_found = 4,
  MIN = success,
  MAX = fail_room_not_found
};

inline const error_code (&EnumValueserror_code())[5] {
  static const error_code values[] = {
    error_code::success,
    error_code::fail_backend_not_responding,
    error_code::fail_user_not_authenticated,
    error_code::fail_kickout_by_duplicate_login,
    error_code::fail_room_not_found
  };
  return values;
}

inline const char * const *EnumNameserror_code() {
  static const char * const names[6] = {
    "success",
    "fail_backend_not_responding",
    "fail_user_not_authenticated",
    "fail_kickout_by_duplicate_login",
    "fail_room_not_found",
    nullptr
  };
  return names;
}

inline const char *EnumNameerror_code(error_code e) {
  if (::flatbuffers::IsOutRange(e, error_code::success, error_code::fail_room_not_found)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameserror_code()[index];
}

}  // namespace alpha

#endif  // FLATBUFFERS_GENERATED_ERRORCODE_ALPHA_H_
